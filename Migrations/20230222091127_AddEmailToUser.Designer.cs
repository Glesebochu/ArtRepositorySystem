// <auto-generated />
using System;
using ArtRepositorySystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtRepositorySystem.Migrations
{
    [DbContext(typeof(MededaContext))]
    [Migration("20230222091127_AddEmailToUser")]
    partial class AddEmailToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtRepositorySystem.Analytic", b =>
                {
                    b.Property<int>("AnalyticId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnalyticId"));

                    b.Property<int?>("ArtId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visibility")
                        .HasColumnType("bit");

                    b.HasKey("AnalyticId");

                    b.HasIndex("ArtId");

                    b.ToTable("Analytic");
                });

            modelBuilder.Entity("ArtRepositorySystem.ArtForms.Art", b =>
                {
                    b.Property<int>("ArtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeedbackFormFeedbackFromId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ArtId");

                    b.HasIndex("FeedbackFormFeedbackFromId");

                    b.ToTable("Art");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Art");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ArtRepositorySystem.FeedbackForm", b =>
                {
                    b.Property<int?>("FeedbackFromId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("FeedbackFromId"));

                    b.HasKey("FeedbackFromId");

                    b.ToTable("FeedbackForm");
                });

            modelBuilder.Entity("ArtRepositorySystem.Option", b =>
                {
                    b.Property<int?>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("OptionId"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("ArtRepositorySystem.QnA", b =>
                {
                    b.Property<int?>("QnAId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("QnAId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeedbackFormFeedbackFromId")
                        .HasColumnType("int");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("QnAId");

                    b.HasIndex("FeedbackFormFeedbackFromId");

                    b.ToTable("QnA");
                });

            modelBuilder.Entity("ArtRepositorySystem.Reaction", b =>
                {
                    b.Property<int>("ReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactionId"));

                    b.Property<int>("ArtworkArtId")
                        .HasColumnType("int");

                    b.Property<int>("ConsumerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReactionId");

                    b.HasIndex("ArtworkArtId");

                    b.HasIndex("ConsumerUserId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("ArtRepositorySystem.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userMode")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ArtUser", b =>
                {
                    b.Property<int>("ArtistsUserId")
                        .HasColumnType("int");

                    b.Property<int>("WorksArtId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsUserId", "WorksArtId");

                    b.HasIndex("WorksArtId");

                    b.ToTable("ArtUser");
                });

            modelBuilder.Entity("ArtRepositorySystem.ArtForms.VisualArt", b =>
                {
                    b.HasBaseType("ArtRepositorySystem.ArtForms.Art");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("VisualArtShape")
                        .HasColumnType("int");

                    b.Property<int>("VisualArtType")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("VisualArt");
                });

            modelBuilder.Entity("ArtRepositorySystem.Analytic", b =>
                {
                    b.HasOne("ArtRepositorySystem.ArtForms.Art", null)
                        .WithMany("Analytics")
                        .HasForeignKey("ArtId");
                });

            modelBuilder.Entity("ArtRepositorySystem.ArtForms.Art", b =>
                {
                    b.HasOne("ArtRepositorySystem.FeedbackForm", "FeedbackForm")
                        .WithMany()
                        .HasForeignKey("FeedbackFormFeedbackFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackForm");
                });

            modelBuilder.Entity("ArtRepositorySystem.QnA", b =>
                {
                    b.HasOne("ArtRepositorySystem.FeedbackForm", null)
                        .WithMany("Questions")
                        .HasForeignKey("FeedbackFormFeedbackFromId");
                });

            modelBuilder.Entity("ArtRepositorySystem.Reaction", b =>
                {
                    b.HasOne("ArtRepositorySystem.ArtForms.Art", "Artwork")
                        .WithMany()
                        .HasForeignKey("ArtworkArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtRepositorySystem.User", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artwork");

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("ArtRepositorySystem.User", b =>
                {
                    b.HasOne("ArtRepositorySystem.User", null)
                        .WithMany("Followers")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("ArtUser", b =>
                {
                    b.HasOne("ArtRepositorySystem.User", null)
                        .WithMany()
                        .HasForeignKey("ArtistsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtRepositorySystem.ArtForms.Art", null)
                        .WithMany()
                        .HasForeignKey("WorksArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtRepositorySystem.ArtForms.Art", b =>
                {
                    b.Navigation("Analytics");
                });

            modelBuilder.Entity("ArtRepositorySystem.FeedbackForm", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ArtRepositorySystem.User", b =>
                {
                    b.Navigation("Followers");
                });
#pragma warning restore 612, 618
        }
    }
}
